//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/Interface.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Interface: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Interface()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Interface"",
    ""maps"": [
        {
            ""name"": ""GameInterface"",
            ""id"": ""9eb8d3b8-d6b1-46c9-8e95-a1d839c50def"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""2ab21acf-a7e2-42f0-88c3-2ea5aaec550a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Start"",
                    ""type"": ""Button"",
                    ""id"": ""858cdb92-49b8-4493-9ecd-d2b69dd75374"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f0c0da03-6c15-416b-99c0-0b6b66da6a8c"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""238bde38-a5dc-4a2e-8f5f-82205e7c5e39"",
                    ""path"": ""<Keyboard>/pause"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f53bf73c-05e4-4d7d-88fb-23dd7a106900"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""25d8effe-8e98-4b34-b5fe-a57a0fe62e23"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GameInterface
        m_GameInterface = asset.FindActionMap("GameInterface", throwIfNotFound: true);
        m_GameInterface_Pause = m_GameInterface.FindAction("Pause", throwIfNotFound: true);
        m_GameInterface_Start = m_GameInterface.FindAction("Start", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GameInterface
    private readonly InputActionMap m_GameInterface;
    private List<IGameInterfaceActions> m_GameInterfaceActionsCallbackInterfaces = new List<IGameInterfaceActions>();
    private readonly InputAction m_GameInterface_Pause;
    private readonly InputAction m_GameInterface_Start;
    public struct GameInterfaceActions
    {
        private @Interface m_Wrapper;
        public GameInterfaceActions(@Interface wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pause => m_Wrapper.m_GameInterface_Pause;
        public InputAction @Start => m_Wrapper.m_GameInterface_Start;
        public InputActionMap Get() { return m_Wrapper.m_GameInterface; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameInterfaceActions set) { return set.Get(); }
        public void AddCallbacks(IGameInterfaceActions instance)
        {
            if (instance == null || m_Wrapper.m_GameInterfaceActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameInterfaceActionsCallbackInterfaces.Add(instance);
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @Start.started += instance.OnStart;
            @Start.performed += instance.OnStart;
            @Start.canceled += instance.OnStart;
        }

        private void UnregisterCallbacks(IGameInterfaceActions instance)
        {
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @Start.started -= instance.OnStart;
            @Start.performed -= instance.OnStart;
            @Start.canceled -= instance.OnStart;
        }

        public void RemoveCallbacks(IGameInterfaceActions instance)
        {
            if (m_Wrapper.m_GameInterfaceActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameInterfaceActions instance)
        {
            foreach (var item in m_Wrapper.m_GameInterfaceActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameInterfaceActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameInterfaceActions @GameInterface => new GameInterfaceActions(this);
    public interface IGameInterfaceActions
    {
        void OnPause(InputAction.CallbackContext context);
        void OnStart(InputAction.CallbackContext context);
    }
}
